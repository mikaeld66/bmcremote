#
# Fragment for the actual Remote BMC configuration
#
# This part contains the commands to check status and ensure desired state
#
# The logic is divided into three parts:
#
#   1) check
#       This part runs through all checks specified
#       The result is a boolean AND of all checks
#
#   2) set
#       If the result of part 1 is FALSE then part 2
#       sets all objects according to the values specified
#
#   3) execute
#       The third part executes any additional commands specified
#       if part 2 is run
#

CMD="/opt/dell/srvadmin/sbin/racadm"    # path to remote admin utility


#
# Get current value
#
# Extracts the last non-empty line
# Expects the result either as
#   <key>=<setting>
# or
#   <setting>
#
# Print setting to standard out
# Returns exit code from racadm
#

function get_current() {
    local object=$1
    local setting=''
    local output

    mapfile -t output < <( $CMD -r $HOST -u $USERNAME -p $SECRET get $object )

    for ((i=$((${#output[@]}-1)); i >= 0; i--)) {
        local txt
        txt=${output[$i]//[$'\t\r']}
        if [[ -n "${txt}" ]]; then
            setting=${txt#*=}
            break
        fi
    }

    if [[ -z $setting ]]; then
        return 1
    fi
    echo $setting
    return 0
}


#
# Set the required value
#
# Checks for indication of necessary job request
#   Prints message to standard out if found
#
# Parameters:
#   1) name of object to set
#   2) value for object
#
# Returns exit status from racadm
#

function set_value() {
    local object=$1
    local setting=$2

    local output=$( $CMD -r $HOST -u $USERNAME -p $SECRET set $object $setting )

    if [ $? -gt 0 ]; then
        return $?
    fi
    if [[ $output =~ "To apply modified value, create a configuration job and reboot" ]]; then
        echo "Application necessary"
    fi
    return 0
}


#
# Check
#
# Compare current and desired value
# 
# Parameters:
#   1) current
#   2) desired
#
# Returns 0 if equal, 1 otherwise
#
 
function compare_values() {
    local current=$1
    local desired=$2

    shopt -s nocasematch
    if [[ "$current" != "$desired" ]]; then
        return 1
    fi

    # got here: all is good
    return 0
}


#
# main body
#

# first iterate through all the checks
status=0
<%= @check %>
<% @check.each do |check_key, check_value| %>
current=$( get current "<%= check_key %>" )
if [ $? -gt 0 ]; then exit $?; fi
compare_values $current "<%= check_value %>"
if [ $? -gt 0 ]; then status=1; fi
<% end %>   

# if 'status' is anything else than 0 at this point 
# the checks failed and we must apply the provided values
# and commands
if [ $status -gt 0 ]; then

    # run through all the set commands provided
    <% @set.each do |set_key, set_value| %>
    set_value "<%= set_key %>" "<%= set_value %>"
    <% end %>

    # execute appended command set
    <% @exec.each do |exec_cmd| %>
    $CMD -r $HOST -u $USERNAME -p $SECRET "<%= exec_cmd%>"
    <% end %>

fi


